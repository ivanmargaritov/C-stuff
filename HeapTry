#include <iostream>
#include <vector>

using namespace std;

template <class T>
class Heap
{
private:
	vector<T> vector;
public:
	Heap(vector<T>& vect)
	{
		vector = vect;
		heapify();
	}
	void heapDown(int index);
	void print();
	void heapify();
};

template <class T>
void Heap<T>::heapDown(int index)
{
	int length = vector.size();
	int leftChildIndex = 2 * index + 1;
	int rightChildIndex = 2 * index + 2;

	if (leftChildIndex >= length)
	{
		return;
	}
	int minIndex = index;

	if (vector[index] > vector[leftChildIndex])
	{
		minIndex = leftChildIndex;
	}
	if ((rightChildIndex < length) && (vector[minIndex] > vector[rightChildIndex]))
	{
		minIndex = rightChildIndex;
	}
	if (minIndex != index)
	{
		int temp = vector[index];
		vector[index] = vector[minIndex];
		vector[minIndex] = temp;
		heapDown(minIndex);
	}
}

template <class T>
void Heap<T>::print()
{
	int size = vector.size();
	for (int i = 0; i < size; i++) 
	{
		cout << vector[i] << " ";
	}
	cout << endl;
}

template <class T>
void Heap<T>::heapify()
{
	int size = vector.size();
	for (int i = size - 1; i >= 0; i--)
	{
		heapDown(i);
	}
}

int main()
{
	vector<int> vec;
	Heap<int> minHeap(vec);

	system("pause");
	return 0;
}
